// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dialog tests should run without crashing 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Dialog
    isOpen={false}
    setOpen={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "isOpen": false,
      "setOpen": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <defaultCloseButton
            aria-label="Close"
            onClick={[Function]}
          />,
          undefined,
        ],
        "onClick": [Function],
        "role": "dialog",
      },
      "ref": Object {
        "current": <dialog
          role="dialog"
        >
          <button
            aria-label="Close"
          >
            x
          </button>
        </dialog>,
      },
      "rendered": Object {
        "instance": <dialog
          role="dialog"
        >
          <button
            aria-label="Close"
          >
            x
          </button>
        </dialog>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <defaultCloseButton
              aria-label="Close"
              onClick={[Function]}
            />,
            undefined,
          ],
          "onClick": [Function],
          "role": "dialog",
        },
        "ref": Object {
          "current": <dialog
            role="dialog"
          >
            <button
              aria-label="Close"
            >
              x
            </button>
          </dialog>,
        },
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "aria-label": "Close",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": <button
                aria-label="Close"
              >
                x
              </button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "Close",
                "children": "x",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                "x",
              ],
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": "dialog",
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      },
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "isOpen": false,
        "setOpen": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <defaultCloseButton
              aria-label="Close"
              onClick={[Function]}
            />,
            undefined,
          ],
          "onClick": [Function],
          "role": "dialog",
        },
        "ref": Object {
          "current": <dialog
            role="dialog"
          >
            <button
              aria-label="Close"
            >
              x
            </button>
          </dialog>,
        },
        "rendered": Object {
          "instance": <dialog
            role="dialog"
          >
            <button
              aria-label="Close"
            >
              x
            </button>
          </dialog>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <defaultCloseButton
                aria-label="Close"
                onClick={[Function]}
              />,
              undefined,
            ],
            "onClick": [Function],
            "role": "dialog",
          },
          "ref": Object {
            "current": <dialog
              role="dialog"
            >
              <button
                aria-label="Close"
              >
                x
              </button>
            </dialog>,
          },
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "aria-label": "Close",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": <button
                  aria-label="Close"
                >
                  x
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "aria-label": "Close",
                  "children": "x",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": Array [
                  "x",
                ],
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "dialog",
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
